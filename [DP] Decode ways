/***
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26

Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).

Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
***/

// If it is 226
//dp[0] is all possible ways uptil 2
//then the next 2, will be either 2,2 or 22 
class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) {
      return 0;
        }
        int[] dp = new int[s.length()];
        dp[0] = s.charAt(0) != '0' ? 1 : 0; //It is basically dp[0] = 1; dp[0] means how many ways it can be decoded until substring 0 + 1
        for(int i = 1; i < s.length(); i++){ //Since you start with i = 1, you are taking this number, and the 2 digit is this and the previous
            //For the start, dp[0] = 1, already considered the case for 1 digit, but not for the 2 digit
            int first = Integer.valueOf(s.substring(i,i+1)); //i + 1 means including this number because it is exclusive
            int second = Integer.valueOf(s.substring(i-1, i+1));
            if(first >= 1 && first <= 9){
                dp[i] = dp[i-1] + dp[i]; //dp[i] means how many ways it can be decode by itself plus previous ones  
            }
            if(second >= 10 && second <= 26){
                int add = i >= 2? dp[i-2] : 1;
                dp[i] = dp[i] + add;
            }
        }
return dp[s.length()-1];
    }
}
