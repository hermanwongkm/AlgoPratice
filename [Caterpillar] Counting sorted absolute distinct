/**
A non-empty array A consisting of N numbers is given. The array is sorted in non-decreasing order. The absolute distinct count of this array is the number of distinct absolute values among the elements of the array.

For example, consider array A such that:

  A[0] = -5
  A[1] = -3
  A[2] = -1
  A[3] =  0
  A[4] =  3
  A[5] =  6
The absolute distinct count of this array is 5, because there are 5 distinct absolute values among the elements of this array, namely 0, 1, 3, 5 and 6.

Write a function:

class Solution { public int solution(int[] A); }

that, given a non-empty array A consisting of N numbers, returns absolute distinct count of array A.

For example, given array A such that:

  A[0] = -5
  A[1] = -3
  A[2] = -1
  A[3] =  0
  A[4] =  3
  A[5] =  6
the function should return 5, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [âˆ’2,147,483,648..2,147,483,647];
array A is sorted in non-decreasing order.
**/
import java.util.*;

class Solution {
    public int solution(int[] A) {
        int count = 1; //Count the initiate count as it will just go through the first if else.
        int left = 0 ;
        int right = A.length -1;
        int currMax = Math.max(Math.abs(A[left]),Math.abs(A[right]));
        if(A[left] == Integer.MIN_VALUE){ //If it is -214...68. You will loop until it is not that number
            currMax = A[left];
            while(left < A.length && A[left]== Integer.MIN_VALUE){
                left++;
            }
        }
        while(left <= right){
            if(Math.abs(A[left]) == currMax){
                left++;
            }
            else if(Math.abs(A[right]) == currMax){
                right--;
            }
            else{
            //Used as a condition to move your pointers so that repeated number do not exist also.
            //Repeated number will be handled at the top, so no count will be added.
                if(Math.abs(A[left]) <= Math.abs(A[right])){
                    count++;
                    currMax = Math.abs(A[right]);
                    right--;
                } else{
                    count++;
                    currMax = Math.abs(A[left]);
                    left++;
                }
            }
        }
        return count;
    }
}
