/**
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

**/

class Solution {
    public int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        int[] a = new int[n];
        
        a[0] = 1;
        a[1] = 2; //default values
        //The idea is that we already know how many ways to reach this 1 step before and 2 step before.
        //Thus, to get to this steps, you can either take 1 step before or 2 step before so you add it together.
        //There's no + 1 because its: 1) You either take this -1 step or -2 step to readcdh current step.
        for(int i = 2; i < n; i ++){
            a[i] = a[i-1] + a[i-2];
        }
        return a[n-1];
        
    }
}
