/**A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

class Solution { public int solution(int[] A); }

that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].
**/

import java.util.*;

class Solution {
    public int solution(int[] A) {
        int leaderCount = 0;
        int leader = findLeader(A);
        if(leader == -1){
            return 0;
        }
        for(int x: A){
            if(x == leader){
                leaderCount++;
            }
        }
        
        int leftLeaderCount = 0;
        int count = 0;
        int right = 0;
        for(int i = 0; i < A.length; i++){
            if(A[i] == leader){
                leftLeaderCount++;
                right = leaderCount - leftLeaderCount;
            }
            int leftTotal = i + 1;
            int rightTotal = A.length - leftTotal;
            
            int leftOthers = leftTotal - leftLeaderCount;
            int rightOthers = rightTotal - right;
            if(leftLeaderCount > leftOthers && right > rightOthers){
                count++;
            }
        }
            return count;
        
    }
    
    //Same code as the leader
    public int findLeader(int[] A){
        int size = 0;
        int value = 0;
        for(int i = 0; i < A.length; i++){
            if(size == 0){
                value = A[i];
                size++;
                continue;
            }
            if(A[i] == value){
                size++;
            } 
            else{
                size--;    
            }
        }
        int count = 0;
        int index = -1;
        if(size > 0){
            for(int i = 0; i < A.length; i++){
                if(A[i] == value){
                    count++;
                    index = i;
                }
            }
        }
        if(count > A.length/2){
        return A[index];
        }
        else{
            return -1;
        }
    }
}
