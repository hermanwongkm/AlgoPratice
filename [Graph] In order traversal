/**
Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode prev = null; 
    TreeNode head = null;
    public TreeNode increasingBST(TreeNode root) {
        //In order means Left Node itself Right --> Left...all the way first
        if(root == null){ //This will end the tree when you reached the last node 
            return null; 
        }
        increasingBST(root.left); //This will go left all the way
        
        //----This point is the processing for the node itself
        if(head == null){ //You reached the last node and there is no head yet, so this is the head
            head = root;
        }
        if(prev != null){ //This line is the line that builds the actual tree
            prev.left = null; //Just removing any left
            prev.right = root; //Building the right leg. 
        }
        prev = root;
        //------After this point is going to the right
        increasingBST(root.right);
        return head;
    }
}
