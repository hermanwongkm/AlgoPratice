/**

Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.

**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//You must do in order traversal because you want to compare the parent node with its immediate child
class Solution {
    int answer = Integer.MAX_VALUE;
    Integer prev = null;
    
    public int minDiffInBST(TreeNode root) {
        //base case with no child
         if(root == null){
             return 0;
         }
        minDiffInBST(root.left);
        
        if(prev != null){
            //Why is it root.val - prev
            //Because you will first reach the left leaf, and it will become previous
            //Then you visit the parent node, which will be root.val.
            //Then you  will set this as previous
            //Then you will go to the right leaf. Which is greater than the parent. So it still works.
            answer = Math.min(answer, root.val - prev);
        }
        prev = root.val;
        minDiffInBST(root.right);
        return answer;
    }
}
