/***
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
***/

//The idea is to compare from the start of array all the way to the current index i. To see if it is greater than the value. If so, take dp[i].

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int[] dp = new int[nums.length];
        int ans = 1;
        dp[0] = 1; //Default longest is 1
        for(int i = 1; i < dp.length; i++){
            int max = 0;
            for(int j = 0; j < i; j++){ //start comparing from the start of the index
                if(nums[i] > nums[j]){
                    max = Math.max(dp[j],max);
                } 
            }
            dp[i] = max + 1; //You can plus one because it is initialized to 0\
            ans = Math.max(ans,dp[i]);
        }
        return ans;
    }
}
