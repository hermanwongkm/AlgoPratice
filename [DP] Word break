/***
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

    The same word in the dictionary may be reused multiple times in the segmentation.
    You may assume the dictionary does not contain duplicate words.

Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false


***/

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        //The idea is that you will check in a n^2 method for all possible combination
        //For a substring to be valid. The previous substrings also has to be true
        boolean[] dp = new boolean[s.length()];
        
        for(int i = 0; i < s.length(); i++){
            for(int j = 0; j <= i; j++){
                String word = s.substring(j,i+1); //+1 because it is exclusive
                if(wordDict.contains(word) && (j == 0 ||dp[j-1])){ //If it is a valid substring, and the previous words are also valid
                    //There is a j == 0 for the case of the first substring.
                    //If it is a valid substring and is also the first word
                    dp[i] = true; //This smaller subproblem is true and has a valid solution
                }
            }
        }
        return dp[s.length() -1];
    }
}
