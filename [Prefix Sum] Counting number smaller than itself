/**
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).

Example 2:

Input: nums = [6,5,4,8]
Output: [2,1,0,3]

Example 3:

Input: nums = [7,7,7,7]
Output: [0,0,0,0]

 

Constraints:

    2 <= nums.length <= 500
    0 <= nums[i] <= 100

**/

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] bucket = new int[101];
        int[] count = new int[101];
        int[] ans = new int[nums.length];
        
        //This counts the number of occurence for each number
        for(int i = 0; i < nums.length; i++){
            bucket[nums[i]]++;
        }
        //[0 1 2 3 4 5 6 7 8]
        //[0 1 2 1 0 0 0 0 1] this is bucket
        
        //This counts the number of values less than the current index
        for(int i = 1; i < count.length; i++){
            //Take the previous value, which is how many number is less than that number
            //Plus, how many occurance is the previous number cuz we know the previous number is less than my current number
            count[i] = count[i-1] + bucket[i-1]; //that's why its 101 instead of 100 
            //[0 1 2 3 4 5 6 7 8 9 10]
            //[0 0 1 3 4 4 4 4 4 5 5 ]
        }
        
        for(int i = 0; i < nums.length; i++){
            ans[i] = count[nums[i]];
        }
        return ans;
    }
}
